#!/usr/bin/env node

const program = require("commander");
const serialport = require("serialport");
const pkg = require("../package.json");
const serverMain = require("../index");
const HID = require('node-hid');

const axes = {
    X: 'X',
    Y: 'Y',
    Z: 'Z',
    UNKNOWN: "unknown"
}

const direction = {
    positive: '',
    negative: '-',
    UNKNOWN: "unknown"
}

const SINGLESTEP_LARGE_JOGDISTANCE = 10 // large jog step in mm
const SINGLESTEP_MEDIUM_JOGDISTANCE = 1 // medium jog step in mm
const SINGLESTEP_SMALL_JOGDISTANCE = 0.1 // small jog step in mm

const SMOOTHJOG_JOGSTEP = 30 // mm
const SMOOTHJOG_COMMANDS_INTERVAL = 200 // period in ms at which the $J jogging commands are sent to the machine
const SMOOTHJOG_JOGSPEED = 5000 // mm per min

let smoothJogging = false;
let smoothJoggingTimer = null;
let jogging = false;

program
    .version(pkg.version)
    .usage("-s <secret> -p <port> [options]")
    .option("-l, --list", "list available ports then exit")
    .option("-d, --list-devices", "list available devices then exit")
    .option("-s, --secret", "the secret key stored in the ~/.cncrc file")
    .option("-p, --port <port>", "path or name of serial port")
    .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
    .option(
        "--socket-address <address>",
        "socket address or hostname (default: localhost)",
        "localhost"
    )
    .option("--socket-port <port>", "socket port (default: 8000)", 8000)
    .option(
        "--controller-type <type>",
        "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
        "Grbl"
    )
    .option(
        "--access-token-lifetime <lifetime>",
        "access token lifetime in seconds or a time span string (default: 30d)",
        "30d"
    )
    .option(
        "--device <vendor_id>:<product_id>", "Vendor and product ID for input device", function(arg) { return arg.split(':', 2); }
    );

program.parse(process.argv);

const options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime,
    device: program.device
};

if (program.list) {
    serialport.list(function(err, ports) {
        if (err) {
            console.error(err);
            process.exit(1);
        }
        ports.forEach(function(port) {
            console.log(port.comName);
        });
    });
    return;
}

if (program.listDevices) {
    const devices = HID.devices();
    devices.forEach(function(device) {
        console.log(device);
    });
    return;
}

const store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    }
};

const createServer = function(options) {

    serverMain(options, function(err, socket) {
        // Grbl
        socket.on("Grbl:state", function(state) {
            console.log('state', state);
            store.controller.state = state;
        });
        socket.on("Grbl:settings", function(settings) {
            console.log('settings', settings);
            store.controller.settings = settings;
        });

        // Smoothie
        socket.on("Smoothie:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Smoothie:settings", function(settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on("TinyG:state", function(state) {
            store.controller.state = state;
        });
        socket.on("TinyG:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on("sender:status", function(data) {
            store.sender.status = data;
        });
    });

    const device = new HID.HID(...program.device);

    device.on("data", function(data) {
        let recv = data.toJSON().data;
        recv.shift();
        const bits = recv.shift();
        const event = {
            l_control: (bits & 1) !== 0 && bits <= 128,
            l_shift: (bits & 2) !== 0 && bits <= 128,
            l_alt: (bits & 4) !== 0 && bits <= 128,
            l_meta: (bits & 8) !== 0 && bits <= 128,
            r_control: (bits & 16) !== 0 && bits <= 128,
            r_shift: (bits & 32) !== 0 && bits <= 128,
            r_alt: (bits & 64) !== 0 && bits <= 128,
            r_meta: (bits & 128) !== 0 && bits <= 128
        };
        //console.log(bits);
        event.key = recv.shift();
        if (event.key == 0 && bits > 128) {
            event.key = bits;
        }
        processEvent(event);
    });

};

const jog_singlestep = function(axis, direction, jogDistance) {
    if ( ! jogging) {
        jogging = true;
        console.log("JOG STEP " + axis + direction + jogDistance);

        socket_write('G91');
        socket_write(`G0${axis}${direction}${jogDistance}`);
        socket_write('G90');
    }
};

const socket_write = function(action) {
  socket.emit('write', options.port, `${action};\n`);
}

const smoothjog = function(axis, direction, jogDistance, jogSpeed) {
    socket_write(`"$J=G91 G21 ${axis}${direction}${jogDistance} F${jogSpeed}`)
    // plan to resend a smooth jog command after a small delay to keep things going,
    // unless user asked to stop the smooth jog movement
    if(smoothJogging) {
        smoothJoggingTimer = setTimeout(smoothjog, SMOOTHJOG_COMMANDS_INTERVAL, axis, direction, jogDistance, jogSpeed);
    }
};

const StartSmoothJog = function(axis, direction, jogStep, jogSpeed) {
    if ( ! smoothJogging) {
        smoothJogging = true;
        smoothjog(axis, direction, jogStep, jogSpeed);
        console.log("SMOOTH JOG " +axis + direction + jogStep + " F"+ jogSpeed);
    }
}

const StopSmoothJog = function() {
    smoothJogging = false;
    clearTimeout(smoothJoggingTimer);
    socket_write("\x85");
    console.log("STOP JOG");
}

const processEvent = function(event) {
    let axis;
    let moveDirection;

    if ( smoothJogging && !(event.l_shift || event.r_shift)) {
        StopSmoothJog();
    }

    switch (event.key) {
        case 80: // shift + left arrow = jog X- large step/speed
            axis = axes.X;
            moveDirection = direction.negative;
            break;
        case 79: // shift + right arrow = jog X+ large step/speed
            axis = axes.X;
            moveDirection = direction.positive;
            break;
        case 82: // shift + up arrow = jog Y+ large step/speed
            axis = axes.Y;
            moveDirection = direction.positive;
            break;
        case 81:  // shift + down arrow = jog Y- large step/speed
            axis = axes.Y;
            moveDirection = direction.negative;
            break;
        case 12: // shift + I = jog Z+ large step/speed
            axis = axes.Z;
            moveDirection = direction.positive;
            break;
        case 14: // shift + K = jog Z- large step/speed
            axis = axes.Z;
            moveDirection = direction.negative;
            break;
        case 0:
            jogging = false;
            break;
    }


    if (axis != null && moveDirection != null) {
        if (event.l_shift || event.r_shift) {
            let jogSpeed = SMOOTHJOG_JOGSPEED;
            let jogStep = SMOOTHJOG_JOGSTEP;

            if (axis === axes.Z) {
                jogSpeed = jogSpeed/2;
                jogStep = jogStep/2;
            }

            StartSmoothJog(axis, moveDirection, jogStep, jogSpeed);
        } else {
            let jogSpeed;
            if (event.l_control || event.r_control) {
                jogSpeed = SINGLESTEP_LARGE_JOGDISTANCE;
            } else if (event.l_alt || event.r_alt) {
                jogSpeed = SINGLESTEP_MEDIUM_JOGDISTANCE;
            } else {
                jogSpeed = SINGLESTEP_SMALL_JOGDISTANCE;
            }
            jog_singlestep(axis, moveDirection, jogSpeed);
        }
    } else if (event.l_control || event.r_control) {
      if (event.key == 11) { // control + h -> home
        socket_write('$H');
      }
    }

    // Useful for debug/figuring out keypress codes
    //console.log('key', key);
    //console.log('data', data);
};

if (options.port && options.device) {
    createServer(options);
    return;
} else {
    console.log("Port and device parameters are required, see --help");
    process.exit(1);
}
